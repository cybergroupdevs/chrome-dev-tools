angular.module("app",["ngRoute","ui.router"]),angular.module("app").controller("homeCtrl",["$scope","$http",function(e,t){window.indexedDB=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,window.IDBTransaction=window.IDBTransaction||window.webkitIDBTransaction||window.msIDBTransaction,window.IDBKeyRange=window.IDBKeyRange||window.webkitIDBKeyRange||window.msIDBKeyRange,window.indexedDB||window.alert("Your browser doesn't support a stable version of IndexedDB."),console.log("hello"),e.button="Remove",e.showElement=!0,e.removeElement=function(){e.showElement=!e.showElement,e.button="Add"},e.childElement=!1,e.addChildElement=function(){e.childElement=!0},e.background="#2998ff",e.getRandomColor=function(){for(var t="0123456789ABCDEF",n="#",o=0;o<6;o++)n+=t[Math.floor(16*Math.random())];e.background=n},e.runAPI=function(){t.get("https://reqres.in/api/users").then(function(e){alert("First API DONE"),t.get("https://reqres.in/api/devices").then(function(e){alert("Seond API DONE"),t.get("https://reqres.in/api/data").then(function(e){alert("Third API DONE")})})})};e.add=function(){var e=db.transaction(["employee"],"readwrite").objectStore("employee").add({id:"01",name:"prasad",age:24,email:"prasad@tutorialspoint.com"});e.onsuccess=function(e){alert("Prasad has been added to your database.")},e.onerror=function(e){alert("Unable to add data\r\nPrasad is already exist in your database! ")}}}]),angular.module("app").controller("masterCtrl",["$scope","$rootScope",function(e,t){console.log("masterCtrl")}]),angular.module("app").controller("navCtrl",["$scope","$location",function(e,t){e.logout=function(){}}]),angular.module("app").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,n){t.otherwise("/"),e.state("app",{url:"/",views:{header:{templateUrl:"/nav.html",controller:"navCtrl"},content:{templateUrl:"/home.html",controller:"homeCtrl"}}}).state("app.clientslist",{url:"clientslist",views:{"content@":{templateUrl:"clients/clients.html",controller:"clientsCtrl"}}}).state("app.clientslist.new",{url:"/new",views:{"content@":{templateUrl:"clients/newClient.html",controller:"newClientCtrl"}}}).state("app.clientslist.edit",{url:"/edit/:id",views:{"content@":{templateUrl:"clients/editClient.html",controller:"editClientCtrl"}}}).state("app.dashboard",{url:"dashboard",authenticate:!0,views:{"content@":{templateUrl:"home.html"}}}),n.html5Mode(!0)}]),angular.module("app").controller("clientsCtrl",["$scope","$http",function(e,t){e.setup=function(){t.get("http://localhost:1818/botsupply/admin/clients").then(function(t){e.clients=t.data,console.log(t)})},e.setup()}]),angular.module("app").controller("editClientCtrl",["$scope","$http","$location","$stateParams",function(e,t,n,o){e.setup=function(){t.get("http://localhost:1818/botsupply/admin/client/edit/"+o.id).then(function(t){console.log(t);var n=t.data[0];e.clientName=n.clientName,e.brief=n.brief,e.domain=n.domain,e.users=n.users})},e.setup()}]),angular.module("app").controller("newClientCtrl",["$scope","$http","$location",function(e,t,n){e.create=function(){t.post("http://localhost:1818/botsupply/admin/client/new",{clientName:e.clientName,brief:e.brief,domain:e.domain,email:e.email,name:e.name,password:e.password,options:e.plan}).then(function(e){console.log(e),n.path("/clientslist/edit/"+e.data._id)})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
